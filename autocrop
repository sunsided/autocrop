#!/usr/bin/env python
import sys, os
import argparse
import re

from PIL import Image

HELP_MSG = "Invalid input '{}', see --help for usage error."

def _valid_numbers(values):
    try: return [int(i) for i in re.compile(r'\d+').findall(values)]
    except ValueError:
        raise argparse.ArgumentTypeError(HELP_MSG.format(values))

def _valid_size(values):
    width, height = _valid_numbers(values) 
    if not width > 0 < height:
        sys.exit(HELP_MSG.format(values))
    return _valid_numbers(values)
    
def _valid_featured(values):
    x1, y1, x2, y2 = _valid_numbers(values)
    if not x1 < x2 and y1 < y2:
        sys.exit(HELP_MSG.format(values))
    return _valid_numbers(values)

def _valid_input(filepath):
    if not os.path.isfile(filepath):
        sys.exit(HELP_MSG.format(filepath))
    return filepath

def _valid_output(filepath):
    p, f = os.path.split(filepath)
    if not os.path.exists(p):
        sys.exit(HELP_MSG.format(filepath))
    return filepath

def _valid_box(size, featured):
    four_sides = 4
    x_size, y_size = size
    x1, y1, x2, y2 = featured
    x_featured = abs(x1 - x2)
    y_featured = abs(y1 - y2)
    if x_size > x_featured:
        x1 -= int(x_size / four_sides)
        x2 += int(x_size / four_sides)
    if y_size > x_featured:
        y1 -= int(y_featured / four_sides)
        y2 += int(y_featured / four_sides)
    return [x1, y1, x2, y2]

def crop_image(inputfile, outputfile, size, featured):
    im = Image.open(inputfile)
    box = _valid_box(size, featured)
    region = im.crop(box)
    region.save(outputfile)
    return True

def main():
    parser = argparse.ArgumentParser(description="Image cropper.")
    parser.add_argument("-s", "--size", type=_valid_size,
                        metavar="WxH",
                        help="ouput image size")
    parser.add_argument("-f", "--featured", type=_valid_featured,
                        metavar="X1,Y1,X2,Y2",
                        help=("coordinates of the important part of the image;"
                              "X1 < X2, Y1 < Y2; (0,0) = top-left corner"))
    parser.add_argument("-i", "--inputfile", type=_valid_input,
                        metavar="FILE",
                        help="path to the original image")
    parser.add_argument("-o", "--output", type=_valid_output,
                        metavar="FILE",
                        help="path to the output image")
    args = parser.parse_args()

    print(args)

    crop_image(args.inputfile, args.output, args.size, args.featured)

if __name__ == '__main__':
    main()
